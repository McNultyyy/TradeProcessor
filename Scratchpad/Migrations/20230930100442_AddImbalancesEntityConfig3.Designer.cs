// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scratchpad;

#nullable disable

namespace Scratchpad.Migrations
{
    [DbContext(typeof(PricesContext))]
    [Migration("20230930100442_AddImbalancesEntityConfig3")]
    partial class AddImbalancesEntityConfig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Scratchpad.Entities.CandleEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CloseDateTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Low")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Open")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("OpenDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CloseDateTime");

                    b.HasIndex("OpenDateTime");

                    b.HasIndex("Symbol");

                    b.ToTable("Candles");
                });

            modelBuilder.Entity("Scratchpad.Entities.ImbalanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BiasType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GapType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Low")
                        .HasColumnType("REAL");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Symbol");

                    b.ToTable("Imbalances");
                });

            modelBuilder.Entity("Scratchpad.Entities.OrderBlockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Close")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CloseDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("REAL");

                    b.Property<decimal>("LiquidityWick")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("REAL");

                    b.Property<decimal>("Open")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("OpenDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CloseDateTime");

                    b.HasIndex("OpenDateTime");

                    b.HasIndex("Symbol");

                    b.ToTable("OrderBlocks");
                });
#pragma warning restore 612, 618
        }
    }
}
